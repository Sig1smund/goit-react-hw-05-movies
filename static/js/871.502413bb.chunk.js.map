{"version":3,"file":"static/js/871.502413bb.chunk.js","mappings":"8KAEMA,EAAM,mCAEZC,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAmB,mCAAG,oGACDD,EAAAA,EAAAA,IAAA,sCAAyCD,IADxC,cAClBG,EADkB,yBAEjBA,EAASC,MAFQ,2CAAH,qDAKnBC,EAAkB,mCAAG,WAAOC,GAAP,uFACAL,EAAAA,EAAAA,IAAA,iBAAoBK,EAAQC,SAA5B,oBAAgDP,EAAhD,oBADA,cACjBG,EADiB,yBAEhBA,EAASC,MAFO,2CAAH,sDAKlBI,EAAgB,mCAAG,WAAOC,GAAP,uFACER,EAAAA,EAAAA,IAAA,gCAAmCD,EAAnC,iCAA+DS,EAA/D,gCADF,cACfN,EADe,yBAEdA,EAASC,MAFK,2CAAH,sDAKhBM,EAAc,mCAAG,WAAOJ,GAAP,uFACIL,EAAAA,EAAAA,IAAA,iBAAoBK,EAApB,4BAA+CN,EAA/C,oBADJ,cACbG,EADa,yBAEZA,EAASC,MAFG,2CAAH,sDAKdO,EAAiB,mCAAG,WAAOL,GAAP,uFACCL,EAAAA,EAAAA,IAAA,iBAAoBK,EAApB,4BAA+CN,EAA/C,oBADD,cAChBG,EADgB,yBAEfA,EAASC,MAFM,2CAAH,sDAKhBQ,EAAM,CACTV,oBAAAA,EACAG,mBAAAA,EACAG,iBAAAA,EACAE,eAAAA,EACAC,kBAAAA,GAGJ,K,6HCnCe,SAASE,IACpB,IAAQN,GAAaO,EAAAA,EAAAA,MAAbP,SACR,GAA8BQ,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KASA,OAPAC,EAAAA,EAAAA,YAAU,WACDX,GAGLK,EAAAA,EAAAA,kBAAsBL,GAAUY,MAAK,SAAAf,GAAI,OAAIa,GAAW,OAAIb,EAAKgB,SAAxB,GAC5C,GAAE,CAACb,IAEmB,IAAnBS,EAAQK,QACD,qEAIP,8BACCL,IACG,wBACKA,EAAQM,KAAI,SAAAC,GAAM,OACf,2BACI,qCAAaA,EAAOC,WACpB,uBAAID,EAAOE,YAFNF,EAAOG,GADD,OAUlC,C","sources":["fetch/fetch.jsx","pages/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = '339fdf0f312ec016e88b23cac1f5716a'\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst fetchTrendingMovies = async () => {\n    const response = await axios.get(`/trending/movie/day?api_key=${KEY}`);\n    return response.data;\n};\n\nconst fetchMoviesDetails = async (movieId) => {\n    const response = await axios.get(`/movie/${movieId.moviesId}?api_key=${KEY}&language=en-US`);\n    return response.data\n}\n\nconst fetchSearchMovie = async (searchQuery) => {\n    const response = await axios.get(`/search/movie?api_key=${KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`)\n    return response.data\n}\n\nconst fetchMovieCast = async (movieId) => {\n    const response = await axios.get(`/movie/${movieId}/credits?api_key=${KEY}&language=en-US`)\n    return response.data\n}\n\nconst fetchMovieReviews = async (movieId) => {\n    const response = await axios.get(`/movie/${movieId}/reviews?api_key=${KEY}&language=en-US`)\n    return response.data\n}\n\n const API = {\n    fetchTrendingMovies,\n    fetchMoviesDetails,\n    fetchSearchMovie,\n    fetchMovieCast,\n    fetchMovieReviews,\n };\n\nexport default API;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport API from 'fetch/fetch';\n\nexport default function Reviews(){\n    const { moviesId } = useParams();\n    const [reviews, setReviews] = useState([]);\n\n    useEffect(() => {\n        if (!moviesId) {\n            return;\n        }\n        API.fetchMovieReviews(moviesId).then(data => setReviews([...data.results]))\n    }, [moviesId]);\n\n    if (reviews.length === 0) {\n        return <p>We don't have any reviews for this movie</p>;\n    }\n\n    return (\n        <>\n        {reviews && (\n            <ul>\n                {reviews.map(review => (\n                    <li key={review.id} >\n                        <h3>Author: {review.author}</h3>\n                        <p>{review.content}</p>\n                    </li>\n                ))}\n            </ul>\n        )}\n        </>\n    )\n}"],"names":["KEY","axios","fetchTrendingMovies","response","data","fetchMoviesDetails","movieId","moviesId","fetchSearchMovie","searchQuery","fetchMovieCast","fetchMovieReviews","API","Reviews","useParams","useState","reviews","setReviews","useEffect","then","results","length","map","review","author","content","id"],"sourceRoot":""}